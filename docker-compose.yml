services:
  # Main FastAPI Application
  app:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile
    container_name: codegen_app
    ports:
      - "6000:8000"  # External port 6000, internal port 8000
    environment:
      - ENVIRONMENT=production
      - REDIS_HOST=redis
      - NATS_URL=nats://nats:4222
      - LITELLM_URL=http://litellm:4000
      - LANGFUSE_HOST=http://langfuse:3000
    env_file:
      - .env
    volumes:
      - ./storage:/app/storage
      - ./prompts:/app/prompts:ro
      - ./generated_projects:/app/storage/generated  # Direct local access
      - ./downloads:/app/storage/downloads           # Download folder
    depends_on:
      redis:
        condition: service_healthy
      nats:
        condition: service_started
      litellm:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "1000m"
        max-file: "5"
    networks:
      - codegen_network

  # Background Worker
  worker:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.worker
    container_name: codegen_worker
    environment:
      - ENVIRONMENT=production
      - REDIS_HOST=redis
      - NATS_URL=nats://nats:4222
    env_file:
      - .env
    volumes:
      - ./storage:/app/storage
    depends_on:
      - redis
      - nats
    restart: unless-stopped
    networks:
      - codegen_network

  # LiteLLM Proxy
  litellm:
    build:
      context: ./infrastructure/litellm
      dockerfile: Dockerfile
    container_name: codegen_litellm
    ports:
      - "4000:4000"
    environment:
      - LITELLM_MASTER_KEY=${LITELLM_MASTER_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - COHERE_API_KEY=${COHERE_API_KEY}
    volumes:
      - ./infrastructure/litellm/config.yaml:/app/config.yaml:ro
    restart: unless-stopped
    networks:
      - codegen_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: codegen_redis
    ports:
      - "6379:6379"
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - redis_data:/data
      - ./infrastructure/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "cider@003vcode", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - codegen_network

  # NATS Message Queue
  nats:
    image: nats:2.10-alpine
    container_name: codegen_nats
    ports:
      - "4222:4222"  # Client connections
      - "8222:8222"  # HTTP monitoring
    command: ["-js", "-m", "8222"]
    volumes:
      - nats_data:/data
      - ./infrastructure/nats/nats.conf:/etc/nats/nats.conf:ro
    restart: unless-stopped
    networks:
      - codegen_network

  # Langfuse Observability
  langfuse:
    image: ghcr.io/langfuse/langfuse:latest
    container_name: codegen_langfuse
    ports:
      - "3000:3000"
    environment:
      - DATABASE_URL=postgresql://langfuse:${LANGFUSE_DB_PASSWORD}@langfuse_db:5432/langfuse
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=${LANGFUSE_NEXTAUTH_SECRET}
      - SALT=${LANGFUSE_SALT}
    depends_on:
      langfuse_db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - codegen_network

  # Langfuse Database
  langfuse_db:
    image: postgres:15-alpine
    container_name: codegen_langfuse_db
    environment:
      - POSTGRES_USER=langfuse
      - POSTGRES_PASSWORD=${LANGFUSE_DB_PASSWORD}
      - POSTGRES_DB=langfuse
    volumes:
      - langfuse_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U langfuse"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - codegen_network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: codegen_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    restart: unless-stopped
    networks:
      - codegen_network

  # Grafana Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: codegen_grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - codegen_network

  # Nginx Reverse Proxy (Optional)
  nginx:
    build:
      context: ./infrastructure/nginx
      dockerfile: Dockerfile
    container_name: codegen_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - codegen_network

volumes:
  redis_data:
  nats_data:
  langfuse_db_data:
  prometheus_data:
  grafana_data:

networks:
  codegen_network:
    driver: bridge

